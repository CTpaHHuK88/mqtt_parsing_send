import paho.mqtt.client as mqtt
import time
import json
from datetime import datetime
from check_host import CheckHost
from config import ConfigPub

# –ö–∞—Å—Ç–æ–º–Ω—ã–π JSON-encoder –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime
class DateTimeEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        return super().default(obj)

def sendMessage():
    #------
    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞
    host = CheckHost(ConfigPub.CH_HOST) 
    status_host = host.check()

    with open('meteo.json', 'r') as file:
        data = json.load(file) # –°–æ–æ–±—â–µ–Ω–∏–µ   
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö  –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–≤–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if isinstance(data, list):
        new_item = {
            "datestamp": datetime.now().strftime("%d.%m.%Y"),
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "status_host": status_host
        }
        data.append(new_item)
    elif isinstance(data, dict):
        data["new_item"] = {
            "datestamp": datetime.now().strftime("%d.%m.%Y"),
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "status_host": status_host
        }
    MQTT_MESSAGE = json.dumps(data, cls=DateTimeEncoder)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    return MQTT_MESSAGE
#------

# Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±—Ä–æ–∫–µ—Ä—É
def on_connect(client, userdata, flags, rc):
    #–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if rc == 0:
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è        
        client.publish(ConfigPub.MQTT_TOPIC, sendMessage())

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ MQTT
client = mqtt.Client()
# –ù–∞–∑–Ω–∞—á–∞–µ–º callback –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
client.on_connect = on_connect

while True:
    client.connect(ConfigPub.MQTT_BROKER, ConfigPub.MQTT_PORT, 60)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Ü–∏–∫–ª (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
    client.loop_start()
    sendMessage()
    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
    time.sleep(2)

    # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    client.disconnect()
    client.loop_stop()
    print("üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞.")
    time.sleep(5)